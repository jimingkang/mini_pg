#include "page.h"
#include <string.h>
#include <unistd.h>
#include <stdio.h>

// 初始化页面

void init_page(Page *page, PageID page_id, uint16_t tuple_size) {
memset(page, 0, PAGE_SIZE);
page->header.page_id = page_id;
page->header.tuple_size = tuple_size;
page->header.free_slots = page_max_tuples(tuple_size);
page->header.next_page = INVALID_PAGE_ID;
page->header.lsn = 0;
}

// 计算页面最大元组数量

uint16_t page_max_tuples(uint16_t tuple_size) {
if (tuple_size == 0) return 0;
return PAGE_DATA_SIZE / tuple_size;
}

// 插入元组
int page_insert_tuple(Page *page, const void *tuple_data) {
    if (page->header.free_slots == 0) {
    return -1; // 页面已满

    }

    uint16_t tuple_size = page->header.tuple_size;

    uint16_t max_tuples = page_max_tuples(tuple_size);

    uint16_t slot_index = max_tuples - page->header.free_slots;

    void *slot = page->data + slot_index * tuple_size;

    memcpy(slot, tuple_data, tuple_size);

    page->header.free_slots--;

    return slot_index;

}

// 获取元组

const void* page_get_tuple(const Page *page, uint16_t slot_index) {

uint16_t tuple_size = page->header.tuple_size;

uint16_t max_tuples = page_max_tuples(tuple_size);

if (slot_index >= max_tuples) {

return NULL;

}

return page->data + slot_index * tuple_size;

}

// 写入页面到磁盘（同步）

int write_page_to_disk(int fd, PageID page_id, const Page *page) {

off_t offset = (off_t)page_id * PAGE_SIZE;

if (lseek(fd, offset, SEEK_SET) != offset) {

perror("lseek");

return -1;

}

if (write(fd, page, PAGE_SIZE) != PAGE_SIZE) {

perror("write");

return -1;

}

// 确保数据写入磁盘

fsync(fd);

return 0;

}

// 从磁盘读取页面

int read_page_from_disk(int fd, PageID page_id, Page *page) {

off_t offset = (off_t)page_id * PAGE_SIZE;

if (lseek(fd, offset, SEEK_SET) != offset) {

perror("lseek");

return -1;

}

if (read(fd, page, PAGE_SIZE) != PAGE_SIZE) {

perror("read");

return -1;

}

return 0;

}