!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
ColumnDef	minidb.h	/^} ColumnDef;$/;"	t	language:C++	typeref:struct:__anonae99d82e0308
DataPage	minidb.h	/^} DataPage;$/;"	t	language:C++	typeref:struct:__anonae99d82e0808
DataType	minidb.h	/^} DataType;$/;"	t	language:C++	typeref:enum:__anonae99d82e0103
HEADER_SIZE	minidb.h	/^#define HEADER_SIZE /;"	d	language:C++
INT4_TYPE	minidb.h	/^INT4_TYPE = 1,$/;"	e	language:C++	enum:__anonae99d82e0103
MAX_COLS	minidb.h	/^#define MAX_COLS /;"	d	language:C++
MAX_NAME_LEN	minidb.h	/^#define MAX_NAME_LEN /;"	d	language:C++
MAX_STRING_LEN	minidb.h	/^#define MAX_STRING_LEN /;"	d	language:C++
MAX_TABLES	minidb.h	/^#define MAX_TABLES /;"	d	language:C++
MINIDB_H	minidb.h	/^#define MINIDB_H$/;"	d	language:C++
MiniDB	minidb.h	/^} MiniDB;$/;"	t	language:C++	typeref:struct:__anonae99d82e0a08
PAGE_SIZE	minidb.h	/^#define PAGE_SIZE /;"	d	language:C++
PageHeader	minidb.h	/^} PageHeader;$/;"	t	language:C++	typeref:struct:__anonae99d82e0208
SYSTEM_CATALOG	minidb.h	/^#define SYSTEM_CATALOG /;"	d	language:C++
SystemCatalog	minidb.h	/^} SystemCatalog;$/;"	t	language:C++	typeref:struct:__anonae99d82e0908
TEXT_TYPE	minidb.h	/^TEXT_TYPE = 2$/;"	e	language:C++	enum:__anonae99d82e0103
TableMeta	minidb.h	/^} TableMeta;$/;"	t	language:C++	typeref:struct:__anonae99d82e0408
Tuple	minidb.h	/^} Tuple;$/;"	t	language:C++	typeref:struct:__anonae99d82e0708
TupleColumn	minidb.h	/^} TupleColumn;$/;"	t	language:C++	typeref:struct:__anonae99d82e0608
TupleValue	minidb.h	/^} TupleValue;$/;"	t	language:C++	typeref:union:__anonae99d82e050a
WAL_FILE	minidb.h	/^#define WAL_FILE /;"	d	language:C++
__anonae99d82e0103	minidb.h	/^typedef enum {$/;"	g	language:C++
__anonae99d82e0208	minidb.h	/^typedef struct {$/;"	s	language:C++
__anonae99d82e0308	minidb.h	/^typedef struct {$/;"	s	language:C++
__anonae99d82e0408	minidb.h	/^typedef struct {$/;"	s	language:C++
__anonae99d82e050a	minidb.h	/^typedef union {$/;"	u	language:C++
__anonae99d82e0608	minidb.h	/^typedef struct {$/;"	s	language:C++
__anonae99d82e0708	minidb.h	/^typedef struct {$/;"	s	language:C++
__anonae99d82e0808	minidb.h	/^typedef struct {$/;"	s	language:C++
__anonae99d82e0908	minidb.h	/^typedef struct {$/;"	s	language:C++
__anonae99d82e0a08	minidb.h	/^typedef struct {$/;"	s	language:C++
catalog	minidb.h	/^SystemCatalog catalog;$/;"	m	language:C++	struct:__anonae99d82e0a08	typeref:typename:SystemCatalog
checksum	minidb.h	/^uint32_t checksum;$/;"	m	language:C++	struct:__anonae99d82e0208	typeref:typename:uint32_t
col_count	minidb.h	/^uint8_t col_count;           \/\/ 列数$/;"	m	language:C++	struct:__anonae99d82e0408	typeref:typename:uint8_t
col_count	minidb.h	/^uint8_t col_count;$/;"	m	language:C++	struct:__anonae99d82e0708	typeref:typename:uint8_t
cols	minidb.h	/^ColumnDef cols[MAX_COLS];    \/\/ 列定义$/;"	m	language:C++	struct:__anonae99d82e0408	typeref:typename:ColumnDef[]
columns	minidb.h	/^TupleColumn columns[MAX_COLS];$/;"	m	language:C++	struct:__anonae99d82e0708	typeref:typename:TupleColumn[]
create_table	minidb.c	/^int create_table(SystemCatalog *catalog, const char *table_name, ColumnDef *columns, uint8_t col/;"	f	language:C	typeref:typename:int	signature:(SystemCatalog * catalog,const char * table_name,ColumnDef * columns,uint8_t col_count)
data_dir	minidb.h	/^char data_dir[256];$/;"	m	language:C++	struct:__anonae99d82e0a08	typeref:typename:char[256]
db_create_table	minidb.c	/^int db_create_table(MiniDB *db, const char *table_name, ColumnDef *columns, uint8_t col_count) {$/;"	f	language:C	typeref:typename:int	signature:(MiniDB * db,const char * table_name,ColumnDef * columns,uint8_t col_count)
db_insert	minidb.c	/^int db_insert(MiniDB *db, const char *table_name, Tuple *tuple) {$/;"	f	language:C	typeref:typename:int	signature:(MiniDB * db,const char * table_name,Tuple * tuple)
db_query	minidb.c	/^int db_query(MiniDB *db, const char *table_name, Tuple *results, int max_results) {$/;"	f	language:C	typeref:typename:int	signature:(MiniDB * db,const char * table_name,Tuple * results,int max_results)
deleted	minidb.h	/^uint8_t deleted;$/;"	m	language:C++	struct:__anonae99d82e0708	typeref:typename:uint8_t
deserialize_tuple	minidb.c	/^int deserialize_tuple(Tuple *tuple, const uint8_t *buffer, const TableMeta *meta) {$/;"	f	language:C	typeref:typename:int	signature:(Tuple * tuple,const uint8_t * buffer,const TableMeta * meta)
filename	minidb.h	/^char filename[MAX_NAME_LEN]; \/\/ 数据文件名$/;"	m	language:C++	struct:__anonae99d82e0408	typeref:typename:char[]
find_table	minidb.c	/^TableMeta *find_table(SystemCatalog *catalog, const char *table_name) {$/;"	f	language:C	typeref:typename:TableMeta *	signature:(SystemCatalog * catalog,const char * table_name)
flags	minidb.h	/^uint16_t flags;      \/\/ 标志位$/;"	m	language:C++	struct:__anonae99d82e0208	typeref:typename:uint16_t
header	minidb.h	/^PageHeader header;$/;"	m	language:C++	struct:__anonae99d82e0808	typeref:typename:PageHeader
init_db	minidb.c	/^void init_db(MiniDB *db, const char *data_dir) {$/;"	f	language:C	typeref:typename:void	signature:(MiniDB * db,const char * data_dir)
init_page_header	minidb.c	/^void init_page_header(PageHeader *header) {$/;"	f	language:C	typeref:typename:void	signature:(PageHeader * header)
init_system_catalog	minidb.c	/^void init_system_catalog(SystemCatalog *catalog) {$/;"	f	language:C	typeref:typename:void	signature:(SystemCatalog * catalog)
int_val	minidb.h	/^int32_t int_val;$/;"	m	language:C++	union:__anonae99d82e050a	typeref:typename:int32_t
lower	minidb.h	/^uint16_t lower;      \/\/ 空闲空间起始位置$/;"	m	language:C++	struct:__anonae99d82e0208	typeref:typename:uint16_t
lsn	minidb.h	/^uint32_t lsn;       \/\/ 日志序列号$/;"	m	language:C++	struct:__anonae99d82e0208	typeref:typename:uint32_t
main	main.c	/^int main() {$/;"	f	language:C	typeref:typename:int	signature:()
name	minidb.h	/^char name[MAX_NAME_LEN];     \/\/ 表名$/;"	m	language:C++	struct:__anonae99d82e0408	typeref:typename:char[]
name	minidb.h	/^char name[MAX_NAME_LEN];$/;"	m	language:C++	struct:__anonae99d82e0308	typeref:typename:char[]
next_oid	minidb.h	/^uint32_t next_oid;$/;"	m	language:C++	struct:__anonae99d82e0908	typeref:typename:uint32_t
oid	minidb.h	/^uint32_t oid;               \/\/ 对象ID$/;"	m	language:C++	struct:__anonae99d82e0408	typeref:typename:uint32_t
oid	minidb.h	/^uint32_t oid;$/;"	m	language:C++	struct:__anonae99d82e0708	typeref:typename:uint32_t
print_tuple	minidb.c	/^void print_tuple(const Tuple *tuple) {$/;"	f	language:C	typeref:typename:void	signature:(const Tuple * tuple)
read_data_page	minidb.c	/^int read_data_page(const char *filename, DataPage *page) {$/;"	f	language:C	typeref:typename:int	signature:(const char * filename,DataPage * page)
serialize_tuple	minidb.c	/^int serialize_tuple(const Tuple *tuple, uint8_t *buffer) {$/;"	f	language:C	typeref:typename:int	signature:(const Tuple * tuple,uint8_t * buffer)
special	minidb.h	/^uint16_t special;    \/\/ 特殊空间起始位置$/;"	m	language:C++	struct:__anonae99d82e0208	typeref:typename:uint16_t
str_val	minidb.h	/^char str_val[MAX_STRING_LEN];$/;"	m	language:C++	union:__anonae99d82e050a	typeref:typename:char[]
table_count	minidb.h	/^uint16_t table_count;$/;"	m	language:C++	struct:__anonae99d82e0908	typeref:typename:uint16_t
tables	minidb.h	/^TableMeta tables[MAX_TABLES];$/;"	m	language:C++	struct:__anonae99d82e0908	typeref:typename:TableMeta[]
tuple_count	minidb.h	/^uint16_t tuple_count;$/;"	m	language:C++	struct:__anonae99d82e0808	typeref:typename:uint16_t
tuples	minidb.h	/^Tuple tuples[64]; \/\/ 简化：固定数量元组$/;"	m	language:C++	struct:__anonae99d82e0808	typeref:typename:Tuple[64]
type	minidb.h	/^DataType type;$/;"	m	language:C++	struct:__anonae99d82e0308	typeref:typename:DataType
type	minidb.h	/^DataType type;$/;"	m	language:C++	struct:__anonae99d82e0608	typeref:typename:DataType
upper	minidb.h	/^uint16_t upper;      \/\/ 空闲空间结束位置$/;"	m	language:C++	struct:__anonae99d82e0208	typeref:typename:uint16_t
value	minidb.h	/^TupleValue value;$/;"	m	language:C++	struct:__anonae99d82e0608	typeref:typename:TupleValue
write_data_page	minidb.c	/^int write_data_page(const char *filename, const DataPage *page) {$/;"	f	language:C	typeref:typename:int	signature:(const char * filename,const DataPage * page)
write_wal	minidb.c	/^void write_wal(const char *action, const char *table, const char *data) {$/;"	f	language:C	typeref:typename:void	signature:(const char * action,const char * table,const char * data)
